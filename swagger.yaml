openapi: 3.0.0
info:
  title: UberEATS API
  description: API documentation for UberEATS prototype
  version: 1.0.0
servers:
  - url: http://localhost:3001/api
    description: Local development server
tags:
  - name: Authentication
    description: User authentication endpoints
  - name: Customer
    description: Customer functionality
  - name: Restaurant
    description: Restaurant functionality
  - name: Orders
    description: Order management
  - name: Favorites
    description: Favorite restaurants

paths:
  /auth/signup:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Create a new customer or restaurant account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - role
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: StrongPassword123!
                role:
                  type: string
                  enum: [customer, restaurant]
                  example: customer
                location:
                  type: string
                  example: 123 Main St, San Jose, CA
                cuisine:
                  type: string
                  example: Italian
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Bad request - Invalid input or email already exists
        '500':
          description: Server error

  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate a user and create a session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: StrongPassword123!
      responses:
        '200':
          description: Login successful
        '401':
          description: Invalid credentials
        '500':
          description: Server error

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: End the user session
      responses:
        '200':
          description: Logged out successfully
        '500':
          description: Server error

  /auth/current-user:
    get:
      tags:
        - Authentication
      summary: Get current user
      description: Get information about the currently logged in user
      responses:
        '200':
          description: Current user information

  /customer/profile:
    get:
      tags:
        - Customer
      summary: Get customer profile
      description: Get logged in customer's profile details
      responses:
        '200':
          description: Customer profile data
        '401':
          description: Unauthorized
        '404':
          description: Profile not found
        '500':
          description: Server error
    put:
      tags:
        - Customer
      summary: Update customer profile
      description: Update logged in customer's profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  example: '1234567890'
                address:
                  type: string
                  example: '123 Main St'
                country:
                  type: string
                  example: 'USA'
                state:
                  type: string
                  example: 'CA'
                city:
                  type: string
                  example: 'San Jose'
      responses:
        '200':
          description: Profile updated successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Profile not found
        '500':
          description: Server error

  /customer/profile/picture:
    post:
      tags:
        - Customer
      summary: Upload profile picture
      description: Upload a profile picture for the customer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Profile picture updated successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Profile not found
        '500':
          description: Server error

  /customer/orders:
    get:
      tags:
        - Customer
        - Orders
      summary: Get customer orders
      description: Get a list of orders for the logged in customer
      responses:
        '200':
          description: List of orders
        '401':
          description: Unauthorized
        '500':
          description: Server error
    post:
      tags:
        - Customer
        - Orders
      summary: Place a new order
      description: Create a new order for the logged in customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - restaurantId
                - items
                - totalPrice
              properties:
                restaurantId:
                  type: integer
                  example: 2
                deliveryAddress:
                  type: string
                  example: '123 Main St, San Jose, CA'
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      dishId:
                        type: integer
                        example: 1
                      quantity:
                        type: integer
                        example: 2
                      price:
                        type: number
                        example: 9.99
                totalPrice:
                  type: number
                  example: 22.97
      responses:
        '201':
          description: Order placed successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /restaurants:
    get:
      tags:
        - Restaurant
      summary: Get all restaurants
      description: Get a list of all restaurants
      responses:
        '200':
          description: List of restaurants
        '500':
          description: Server error

  /restaurants/{id}:
    get:
      tags:
        - Restaurant
      summary: Get restaurant by ID
      description: Get details of a specific restaurant
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 2
      responses:
        '200':
          description: Restaurant details
        '404':
          description: Restaurant not found
        '500':
          description: Server error

  /restaurants/{id}/menu:
    get:
      tags:
        - Restaurant
      summary: Get restaurant menu
      description: Get the menu for a specific restaurant
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 2
      responses:
        '200':
          description: Restaurant menu
        '404':
          description: Restaurant not found
        '500':
          description: Server error

  /restaurant/profile:
    get:
      tags:
        - Restaurant
      summary: Get restaurant profile
      description: Get logged in restaurant's profile
      responses:
        '200':
          description: Restaurant profile data
        '401':
          description: Unauthorized
        '404':
          description: Profile not found
        '500':
          description: Server error
    put:
      tags:
        - Restaurant
      summary: Update restaurant profile
      description: Update logged in restaurant's profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  example: 'Authentic Italian cuisine'
                location:
                  type: string
                  example: '123 Main St, San Jose, CA'
                cuisine:
                  type: string
                  example: 'Italian'
                openTime:
                  type: string
                  format: time
                  example: '11:00'
                closeTime:
                  type: string
                  format: time
                  example: '22:00'
                deliveryFee:
                  type: number
                  example: 2.99
                minOrder:
                  type: number
                  example: 15
      responses:
        '200':
          description: Profile updated successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Profile not found
        '500':
          description: Server error

  /restaurant/profile/image:
    post:
      tags:
        - Restaurant
      summary: Upload restaurant image
      description: Upload an image for the restaurant
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Restaurant image updated successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Profile not found
        '500':
          description: Server error

  /restaurant/dishes:
    get:
      tags:
        - Restaurant
      summary: Get restaurant dishes
      description: Get all dishes for the logged in restaurant
      responses:
        '200':
          description: List of dishes
        '401':
          description: Unauthorized
        '500':
          description: Server error
    post:
      tags:
        - Restaurant
      summary: Add a new dish
      description: Add a new dish to the restaurant's menu
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - description
                - price
                - category
              properties:
                name:
                  type: string
                  example: 'Spaghetti Carbonara'
                description:
                  type: string
                  example: 'Classic Italian pasta with eggs, cheese, pancetta, and black pepper'
                price:
                  type: number
                  example: 14.99
                category:
                  type: string
                  example: 'Main Course'
                image:
                  type: string
                  format: binary
      responses:
        '201':
          description: Dish added successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /restaurant/dishes/{id}:
    put:
      tags:
        - Restaurant
      summary: Update a dish
      description: Update an existing dish
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - description
                - price
                - category
              properties:
                name:
                  type: string
                  example: 'Spaghetti Carbonara'
                description:
                  type: string
                  example: 'Classic Italian pasta with eggs, cheese, pancetta, and black pepper'
                price:
                  type: number
                  example: 14.99
                category:
                  type: string
                  example: 'Main Course'
                isAvailable:
                  type: boolean
                  example: true
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Dish updated successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Dish not found
        '500':
          description: Server error
    delete:
      tags:
        - Restaurant
      summary: Delete a dish
      description: Delete an existing dish
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Dish deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Dish not found
        '500':
          description: Server error

  /restaurant/orders:
    get:
      tags:
        - Restaurant
        - Orders
      summary: Get restaurant orders
      description: Get orders for the logged in restaurant, optionally filtered by status
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [New, Order Received, Preparing, On the Way, Pick-up Ready, Delivered, Picked Up, Cancelled]
          example: Preparing
      responses:
        '200':
          description: List of orders
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /restaurant/orders/{id}/status:
    put:
      tags:
        - Restaurant
        - Orders
      summary: Update order status
      description: Update the status of an order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [New, Order Received, Preparing, On the Way, Pick-up Ready, Delivered, Picked Up, Cancelled]
                  example: Preparing
      responses:
        '200':
          description: Order status updated successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Order not found
        '500':
          description: Server error

  /orders/{id}:
    get:
      tags:
        - Orders
      summary: Get order details
      description: Get details of a specific order
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: Order details
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Order not found
        '500':
          description: Server error

  /favorites:
    get:
      tags:
        - Favorites
      summary: Get favorite restaurants
      description: Get a list of restaurants marked as favorites by the customer
      responses:
        '200':
          description: List of favorite restaurants
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /favorites/{restaurantId}:
    post:
      tags:
        - Favorites
      summary: Add to favorites
      description: Add a restaurant to customer's favorites
      parameters:
        - name: restaurantId
          in: path
          required: true
          schema:
            type: integer
          example: 2
      responses:
        '201':
          description: Restaurant added to favorites
        '401':
          description: Unauthorized
        '500':
          description: Server error
    delete:
      tags:
        - Favorites
      summary: Remove from favorites
      description: Remove a restaurant from customer's favorites
      parameters:
        - name: restaurantId
          in: path
          required: true
          schema:
            type: integer
          example: 2
      responses:
        '200':
          description: Restaurant removed from favorites
        '401':
          description: Unauthorized
        '404':
          description: Favorite not found
        '500':
          description: Server error

  /favorites/{restaurantId}/check:
    get:
      tags:
        - Favorites
      summary: Check if restaurant is favorite
      description: Check if a restaurant is in customer's favorites
      parameters:
        - name: restaurantId
          in: path
          required: true
          schema:
            type: integer
          example: 2
      responses:
        '200':
          description: Favorite check result
          content:
            application/json:
              schema:
                type: object
                properties:
                  isFavorite:
                    type: boolean
        '401':
          description: Unauthorized
        '500':
          description: Server error